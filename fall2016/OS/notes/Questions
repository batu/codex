Is there only one kernel space or does every process have its own kernel space (stack)?
	From the notes I think every process has a kernel space (stack and what not), if so what is the difference between the kernel space of a process and the main kernel space which I assume exists (or is there even a main kernel space or is it all distributed?)

     kernel stack on the process actually lives in kernel memory space
         Whenever you make a system call your kernel needs to take charge. User  stack can not be used so
 
         You also have the kernel code section, local variables shared amongts   kernel threads. OSs are multiple kernel threads.

------------
If we are starting a system call from the kernel space why is there no need to save the state?
	Why would you even start a system call from the kernel space, isnt the point of a system call to push the job that can not be executed by the user (aka read, IO etc) to kernel?

-----------
Semaphores?
	Check online resource

----------
The hybrid?

---------
segments
